using System;
using System.Text;
using System.IO;
using BW;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization.Formatters.Binary;
using System.Collections;
using System.Runtime.Serialization;
namespace BW
{
	class Program
	{
		//const string fileName = "datos_binarios.dat";
		static void Main()
		{ 
			//Serialize ();
		
			//static void Serialize() 
			//{
			int x; // Es el numero de canal del 1 al 4096
			int y; // Es el numero de frame
			BrwRdr archivo_brw = new BrwRdr ();
			archivo_brw.Open ("/home/rgut/100315.brw");

			long nFrames = archivo_brw.RecNFrames;
			//Console.WriteLine(nFrames);

			// PARA OBTENER LOS DATOS DE TODOS LOS CANALES REGISTRADOS
			//ChCoord[] chs = archivo_brw.GetRecChsUnion ();

			//double[][] datos;
			//datos = archivo_brw.GetRawData (chs, 0, 7022);  // Canales y rango de frames

			// PARA OBTENER LOS DATOS DE UN SOLO CANAL

			string[] filas = new string[60];
			string[] columnas = new string[60];
			int[] fila = new int[60];
			int[] columna = new int[60];
			string[] canales = new string[60];
			string[] factor_de_conversion = new string[60]; 

			using (StreamReader rows_DG = new StreamReader("rows_DG.dat"))
			using (StreamReader cols_DG = new StreamReader("cols_DG.dat"))
			{
				for (x = 0; x < 60; x++) {
					filas [x] = rows_DG.ReadLine ();
					columnas [x] = cols_DG.ReadLine ();
					fila [x] = Convert.ToInt32 (filas [x]);
					columna [x] = Convert.ToInt32 (columnas [x]);
					//Console.WriteLine (fila [x] + "\t" + columna [x]);
					//Console.WriteLine (filas [x] + "\t" + columnas [x]);
					canales [x] = ("Ch" + filas [x] + "_" + columnas [x] + ".bin");
					factor_de_conversion [x] = ("Ch" + filas [x] + "_" + columnas [x] + ".dat"); 
				}
			}

			//Console.WriteLine (fila [0] + "\t" + columna [0]);
			//Console.WriteLine (canales [0]);

			double range;
			double valor_maximo;
			double valor_minimo;
			double offset;
			double scaling_factor;
			sbyte[] dato = new sbyte[nFrames];

			for (x = 0; x < 60; x++) {

				//const string fileName = canales [x];

				ChCoord ch = new ChCoord (fila [x], columna [x]);

				double[] datos;
				datos = archivo_brw.GetRawData (ch, 0, nFrames);

				for (y = 0; y < nFrames; y++) {
					if (datos[y] > 800 )
					{
						datos[y] = 0;
					}
				}

				valor_maximo = (datos.Max ());
				valor_minimo = (datos.Min ());
				range = (valor_maximo - valor_minimo);
				offset = (range / 2) + valor_minimo;
				scaling_factor = Math.Pow (2, 7) / range;

				//Console.WriteLine("Valor máximo:" + datos.Max());
				//Console.WriteLine ("Valor mínimo:" + datos.Min ());
				//Console.WriteLine("Rango entre valor máximo y valor mínimo:" + range);
				//Console.WriteLine ("Scaling factor:" + scaling_factor);
				//Console.WriteLine ("Offset:" + offset);

				//using (StreamWriter outfile = new StreamWriter("/home/rgut/Proyecto_4096/Funciones/trazos_prueba/" + canales [x]))
				//using (StreamWriter outfile = new StreamWriter(factor_de_conversion [x])
				using (BinaryWriter chacal = new BinaryWriter(File.Open("/home/rgut/Proyecto_4096/Funciones/trazos_binarios/100315/" + factor_de_conversion [x], FileMode.Create))) {
					chacal.Write (scaling_factor);
					chacal.Write (offset);
				}
				using (BinaryWriter writer = new BinaryWriter(File.Open("/home/rgut/Proyecto_4096/Funciones/trazos_binarios/100315/" + canales [x], FileMode.Create)))
					for (y = 0; y < nFrames; y++) {
						dato [y] = System.Convert.ToSByte ((datos [y] - offset) * scaling_factor);
						writer.Write(dato[y]);
						//outfile.WriteLine (dato [y].ToString ());
						//outfile.WriteLine (datos [y].ToString ());
					}
				Console.WriteLine (canales [x]);
			}
		}
	}
}
